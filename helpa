/************************************************************************************************************
     * socket(int domain, int{} type, int protocol) - создания сокета
     *
     * Домен определяет пространство адресов, в котором располагается сокет,и
     * множество протоколов, которые используются для передачи данных:
     *
     * AF_INET — IP сокет, где AF - address family - семейство адресов
     * AF_UNIX — UNIX сокет
     *
     *
     * Тип сокета определяет способ передачи данных по сети:
     *
     * SOCK_STREAM — передача потока данных с предварительной установкой соединения.
     * SOCK_DGRAM — передача данных в виде отдельных сообщений (датаграмм).
     *               предварительная установка соединения не требуется. Быстрее, но надёжно
     * SOCK_RAW - низкоуровневый сокет (сырой).
     *
     * Протокол, используемый для передачи данных:
     * 0 - по умолчанию
     ***********************************************************************************************************/





    /***********************************************************************************************************
     * int bind(int sockfd, struct sockaddr *addr, int addrlen) - явное связывание сокета с некоторым адресом
     *
     *  sockfd - дескриптор сокета
     *  addr - указатель на структуру с адресом
     *  addrlen - длина структуры addr
     *
     ************************************************************************************************************/





    /******************************** Установка соединения на сервере *******************************************
     * int listen(int sockfd, int backlog) -  создаётся очередь запросов на соединение.
     * При этом сокет переводится в режим ожидания запросов со стороны клиентов.
     *
     * sockfd - дескриптор сокета
     * backlog - размер очереди запросов
     *
     ************************************************************************************************************

     ************************************************************************************************************
     * int accept(int sockfd, void *addr, int *addrlen) - когда сервер готов обслужить очередной запрос
     * accept создаёт для общения с клиентом новый сокет и возвращает его дескриптор
     *
     * sockfd - слушающий сокет
     * addr - адрес сокета клиента, который установил соединение с сервером
     * addrlen - размер структуры, функция accept записывает сюда длину, которая реально была использована
     *
     * Если нас не интересует адрес клиента, вы можете просто передать NULL в качестве второго и третьего параметров.
     *
     * Полученный от accept новый сокет связан с тем же самым адресом, что и слушающий сокет.
     *************************************************************************************************************/





    /**************************************** Установка соединения на клиенте ************************************
     * int connect(int sockfd, struct sockaddr *serv_addr, int addrlen) - для установления соединения на стороне клиента
     *
     * sockfd - сокет, который будет использоваться для обмена данными с сервером
     * serv_addr содержит указатель на структуру с адресом сервера
     * addrlen - длину этой структуры
     *
     *************************************************************************************************************/





    /********************************************* Обмен данными *************************************************
     * int send(int sockfd, const void *msg, int len, int flags) - используется для отправки данных
     *
     *  sockfd - дескриптор сокета
     *  msg - указатель на буфер с данными
     *  len - длина буфера в байтах
     *  flags - набор битовых флагов, управляющих работой функции:
     *
     *      MSG_OOB. Предписывает отправить данные как срочные
     *      MSG_DONTROUTE. Запрещает маршрутизацию пакетов. Нижележащие транспортные слои могут проигнорировать этот флаг.
     *
     * функция send возвращает число байтов, которое на самом деле было отправлено (или -1 в случае ошибки)
     ************************************************************************************************************

     ************************************************************************************************************
     * int recv(int sockfd, void *buf, int len, int flags) - для чтения данных из сокета
     *
     *  sockfd - дескриптор сокета
     *  msg - указатель на буфер с данными
     *  len - длина буфера в байтах
     *  flags - набор битовых флагов, управляющих работой функции
     *
     *  функция recv возвращает количество прочитанных байтов, которое может быть меньше размера буфера.
     *  если вернулся 0 - значит соединение разорвано.
     *************************************************************************************************************/




    /****************************************** Закрытие сокета **************************************************
     * int close(int fd) - закончив обмен данными, закрывает сокет
     *
     * int shutdown(int sockfd, int how) - запретить передачу данных в каком-то одном направлении
     *
     *  how:
     *      0 - запретить чтение из сокета
     *      1 - запретить запись в сокет
     *      2 - запретить и то и другое
     *
     * */



        /*// заполняем пмножество сокетов
        fd_set readset{};
        FD_ZERO(&readset);
        FD_SET(server, &readset);

        for (std::set<int>::iterator it = clients.begin(); it != clients.end(); it++) {
            FD_SET(*it, &readset);
        }

        // задаём таймаут
        timeval timeout;
        timeout.tv_sec=15;
        timeout.tv_usec=0;

        // ждём события в одном из сокетов
*/